{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f8de8e89",
   "metadata": {
    "id": "8NpsJcqO6Oe6",
    "papermill": {
     "duration": 0.00718,
     "end_time": "2024-08-21T09:05:08.145321",
     "exception": false,
     "start_time": "2024-08-21T09:05:08.138141",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ASSIGNMENT 2\n",
    "\n",
    "\n",
    "*   Shashwat Raj (2021MT10259)\n",
    "*   Advait Rege (2021MT60946)\n",
    "*   Ishav Singla (2021MT10889)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7dfe7bf",
   "metadata": {
    "id": "5nOV3pFC50kT",
    "papermill": {
     "duration": 0.006133,
     "end_time": "2024-08-21T09:05:08.158560",
     "exception": false,
     "start_time": "2024-08-21T09:05:08.152427",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Problem Statement :**\n",
    "Use MNIST Handwritten digits DATASET\n",
    "(a) Implement\n",
    "  (1) Decision Tree,\n",
    "  (2) Random Forest,\n",
    "  (3) Na√Øve Bayes Classifier,\n",
    "  (4) KNN classifier\n",
    "  (5) Neural Network classifier\n",
    "compare the performances using k-fold cross validation and other tuning techniques to do multi-class classification where the idea is to classify the image to one of the ten digits (0-9).\n",
    "\n",
    "(b)  Exploration of Different Evaluation Metrics. Evaluate your methods using different evaluation metrics.  \n",
    "\n",
    "(C )  Parameter Tuning through Grid Search/Cross Validation  \n",
    "Tune the parameters using  two powerful techniques of grid search and\n",
    "parameter search."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68f86fd6",
   "metadata": {
    "id": "vkKkehrD7m62",
    "papermill": {
     "duration": 0.006019,
     "end_time": "2024-08-21T09:05:08.171060",
     "exception": false,
     "start_time": "2024-08-21T09:05:08.165041",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#Loading the Data and splitting it into train and test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "678fadeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:05:08.186340Z",
     "iopub.status.busy": "2024-08-21T09:05:08.185599Z",
     "iopub.status.idle": "2024-08-21T09:05:10.387107Z",
     "shell.execute_reply": "2024-08-21T09:05:10.386332Z"
    },
    "id": "IL-XfJBg5yH1",
    "papermill": {
     "duration": 2.21139,
     "end_time": "2024-08-21T09:05:10.389336",
     "exception": false,
     "start_time": "2024-08-21T09:05:08.177946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_digits\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Load the dataset\n",
    "digits = load_digits()\n",
    "\n",
    "# Split the data into features and labels\n",
    "X = digits.data\n",
    "y = digits.target\n",
    "\n",
    "# Split the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "433377b3",
   "metadata": {
    "id": "Dowf69Wj70oe",
    "papermill": {
     "duration": 0.006167,
     "end_time": "2024-08-21T09:05:10.402206",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.396039",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Implementing and Evaluating various Classifiers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6976190",
   "metadata": {
    "id": "Y3ZTQI258DPB",
    "papermill": {
     "duration": 0.006163,
     "end_time": "2024-08-21T09:05:10.414716",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.408553",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**1. Decision Tree Classifier**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49b96f11",
   "metadata": {
    "id": "vWyO1tpzuJYp",
    "papermill": {
     "duration": 0.006113,
     "end_time": "2024-08-21T09:05:10.427598",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.421485",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1b64afc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:05:10.441638Z",
     "iopub.status.busy": "2024-08-21T09:05:10.441340Z",
     "iopub.status.idle": "2024-08-21T09:05:10.736098Z",
     "shell.execute_reply": "2024-08-21T09:05:10.735349Z"
    },
    "id": "5ndWGMJp50F7",
    "papermill": {
     "duration": 0.304454,
     "end_time": "2024-08-21T09:05:10.738374",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.433920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "dt_classifier = DecisionTreeClassifier()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2aa06a7e",
   "metadata": {
    "id": "mdjNyt5Y8Lct",
    "papermill": {
     "duration": 0.006072,
     "end_time": "2024-08-21T09:05:10.751245",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.745173",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**2. Random Forest Classifier**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0add33d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:05:10.766125Z",
     "iopub.status.busy": "2024-08-21T09:05:10.765430Z",
     "iopub.status.idle": "2024-08-21T09:05:10.874642Z",
     "shell.execute_reply": "2024-08-21T09:05:10.873932Z"
    },
    "id": "cw5kzJgD8T4m",
    "papermill": {
     "duration": 0.119237,
     "end_time": "2024-08-21T09:05:10.876668",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.757431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "rf_classifier = RandomForestClassifier()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a51d3702",
   "metadata": {
    "id": "vV11_6Io8nWq",
    "papermill": {
     "duration": 0.006203,
     "end_time": "2024-08-21T09:05:10.889292",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.883089",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**3. Naive Bayes Classifier**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2d784eab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:05:10.903105Z",
     "iopub.status.busy": "2024-08-21T09:05:10.902803Z",
     "iopub.status.idle": "2024-08-21T09:05:10.909222Z",
     "shell.execute_reply": "2024-08-21T09:05:10.908593Z"
    },
    "id": "FsVMcv0d8U5J",
    "papermill": {
     "duration": 0.015515,
     "end_time": "2024-08-21T09:05:10.911120",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.895605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "nb_classifier = GaussianNB()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fea3cda7",
   "metadata": {
    "id": "vmwAu7Av8uo0",
    "papermill": {
     "duration": 0.006223,
     "end_time": "2024-08-21T09:05:10.923638",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.917415",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**4. KNN Classifier**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5a4164cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:05:10.937656Z",
     "iopub.status.busy": "2024-08-21T09:05:10.937399Z",
     "iopub.status.idle": "2024-08-21T09:05:10.941170Z",
     "shell.execute_reply": "2024-08-21T09:05:10.940452Z"
    },
    "id": "oFKOywd88bXT",
    "papermill": {
     "duration": 0.012959,
     "end_time": "2024-08-21T09:05:10.942993",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.930034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "knn_classifier = KNeighborsClassifier()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2be80607",
   "metadata": {
    "id": "vkvatEsb8yMo",
    "papermill": {
     "duration": 0.006585,
     "end_time": "2024-08-21T09:05:10.956224",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.949639",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**5. Neural Network Classifier**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6624e74a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:05:10.970077Z",
     "iopub.status.busy": "2024-08-21T09:05:10.969807Z",
     "iopub.status.idle": "2024-08-21T09:05:10.984565Z",
     "shell.execute_reply": "2024-08-21T09:05:10.983921Z"
    },
    "id": "MuU7w2M28diP",
    "papermill": {
     "duration": 0.023752,
     "end_time": "2024-08-21T09:05:10.986383",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.962631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "\n",
    "nn_classifier = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6a5e09b",
   "metadata": {
    "id": "iaNE4mbt9A4r",
    "papermill": {
     "duration": 0.006308,
     "end_time": "2024-08-21T09:05:10.999220",
     "exception": false,
     "start_time": "2024-08-21T09:05:10.992912",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Implement k-fold Cross Validation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a378edcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:05:11.013515Z",
     "iopub.status.busy": "2024-08-21T09:05:11.013242Z",
     "iopub.status.idle": "2024-08-21T09:05:21.616748Z",
     "shell.execute_reply": "2024-08-21T09:05:21.615390Z"
    },
    "id": "L1PRPuX78glX",
    "outputId": "08e336c5-3d90-4066-d630-196c626f93fa",
    "papermill": {
     "duration": 10.615011,
     "end_time": "2024-08-21T09:05:21.620858",
     "exception": false,
     "start_time": "2024-08-21T09:05:11.005847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classifier 1: 0.841325493612079\n",
      "Classifier 2: 0.9728634339914827\n",
      "Classifier 3: 0.8295489740611692\n",
      "Classifier 4: 0.9832921989934185\n",
      "Classifier 5: 0.9693670150987224\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "classifiers = [dt_classifier, rf_classifier, nb_classifier, knn_classifier, nn_classifier]\n",
    "cv_scores = []\n",
    "\n",
    "for classifier in classifiers:\n",
    "    scores = cross_val_score(classifier, X_train, y_train, cv=5, scoring='accuracy')\n",
    "    cv_scores.append(scores.mean())\n",
    "\n",
    "# Print cross-validation scores\n",
    "for i, score in enumerate(cv_scores):\n",
    "    print(f\"Classifier {i+1}: {score}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcf28d6b",
   "metadata": {
    "id": "wl-Ie0uz9EOa",
    "papermill": {
     "duration": 0.038308,
     "end_time": "2024-08-21T09:05:21.684489",
     "exception": false,
     "start_time": "2024-08-21T09:05:21.646181",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Exploration of Different Evaluation Metrics**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1c640deb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:05:21.708576Z",
     "iopub.status.busy": "2024-08-21T09:05:21.708192Z",
     "iopub.status.idle": "2024-08-21T09:05:24.725781Z",
     "shell.execute_reply": "2024-08-21T09:05:24.724794Z"
    },
    "id": "XAjhN4dC8jNR",
    "outputId": "f6a79b12-5d15-4784-89e5-e7af3cae8ea4",
    "papermill": {
     "duration": 3.037393,
     "end_time": "2024-08-21T09:05:24.733303",
     "exception": false,
     "start_time": "2024-08-21T09:05:21.695910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classifier 1 Evaluation:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.88      0.91        33\n",
      "           1       0.91      0.75      0.82        28\n",
      "           2       0.87      0.82      0.84        33\n",
      "           3       0.70      0.88      0.78        34\n",
      "           4       0.89      0.87      0.88        46\n",
      "           5       0.93      0.91      0.92        47\n",
      "           6       0.87      0.94      0.90        35\n",
      "           7       0.86      0.88      0.87        34\n",
      "           8       0.77      0.67      0.71        30\n",
      "           9       0.83      0.88      0.85        40\n",
      "\n",
      "    accuracy                           0.86       360\n",
      "   macro avg       0.86      0.85      0.85       360\n",
      "weighted avg       0.86      0.86      0.86       360\n",
      "\n",
      "Classifier 2 Evaluation:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.97      0.98        33\n",
      "           1       0.97      1.00      0.98        28\n",
      "           2       1.00      1.00      1.00        33\n",
      "           3       1.00      0.94      0.97        34\n",
      "           4       0.96      1.00      0.98        46\n",
      "           5       0.94      0.98      0.96        47\n",
      "           6       0.97      0.97      0.97        35\n",
      "           7       1.00      0.97      0.99        34\n",
      "           8       0.97      0.97      0.97        30\n",
      "           9       0.97      0.95      0.96        40\n",
      "\n",
      "    accuracy                           0.97       360\n",
      "   macro avg       0.98      0.97      0.98       360\n",
      "weighted avg       0.98      0.97      0.98       360\n",
      "\n",
      "Classifier 3 Evaluation:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.94      0.97        33\n",
      "           1       0.83      0.86      0.84        28\n",
      "           2       0.91      0.61      0.73        33\n",
      "           3       0.91      0.85      0.88        34\n",
      "           4       0.97      0.83      0.89        46\n",
      "           5       0.90      0.94      0.92        47\n",
      "           6       0.92      0.97      0.94        35\n",
      "           7       0.69      0.97      0.80        34\n",
      "           8       0.57      0.87      0.68        30\n",
      "           9       0.96      0.65      0.78        40\n",
      "\n",
      "    accuracy                           0.85       360\n",
      "   macro avg       0.86      0.85      0.84       360\n",
      "weighted avg       0.88      0.85      0.85       360\n",
      "\n",
      "Classifier 4 Evaluation:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        33\n",
      "           1       1.00      1.00      1.00        28\n",
      "           2       1.00      1.00      1.00        33\n",
      "           3       1.00      1.00      1.00        34\n",
      "           4       0.98      1.00      0.99        46\n",
      "           5       0.98      0.96      0.97        47\n",
      "           6       0.97      1.00      0.99        35\n",
      "           7       1.00      0.97      0.99        34\n",
      "           8       1.00      1.00      1.00        30\n",
      "           9       0.95      0.95      0.95        40\n",
      "\n",
      "    accuracy                           0.99       360\n",
      "   macro avg       0.99      0.99      0.99       360\n",
      "weighted avg       0.99      0.99      0.99       360\n",
      "\n",
      "Classifier 5 Evaluation:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        33\n",
      "           1       0.93      1.00      0.97        28\n",
      "           2       0.97      1.00      0.99        33\n",
      "           3       1.00      0.94      0.97        34\n",
      "           4       1.00      1.00      1.00        46\n",
      "           5       0.94      0.98      0.96        47\n",
      "           6       0.97      0.97      0.97        35\n",
      "           7       1.00      0.97      0.99        34\n",
      "           8       0.96      0.90      0.93        30\n",
      "           9       0.97      0.97      0.97        40\n",
      "\n",
      "    accuracy                           0.97       360\n",
      "   macro avg       0.98      0.97      0.97       360\n",
      "weighted avg       0.98      0.97      0.97       360\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "# Fit classifiers on the training data\n",
    "for classifier in classifiers:\n",
    "    classifier.fit(X_train, y_train)\n",
    "\n",
    "# Evaluate on the test set\n",
    "for i, classifier in enumerate(classifiers):\n",
    "    y_pred = classifier.predict(X_test)\n",
    "    print(f\"Classifier {i+1} Evaluation:\")\n",
    "    print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd80ded3",
   "metadata": {
    "id": "PUG2-ROm9JlK",
    "papermill": {
     "duration": 0.01577,
     "end_time": "2024-08-21T09:05:24.765365",
     "exception": false,
     "start_time": "2024-08-21T09:05:24.749595",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Parameter Tuning through Grid Search/Cross Validation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bf312e15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:05:24.799402Z",
     "iopub.status.busy": "2024-08-21T09:05:24.798789Z",
     "iopub.status.idle": "2024-08-21T09:06:43.442171Z",
     "shell.execute_reply": "2024-08-21T09:06:43.440834Z"
    },
    "id": "uQfoofKz8llG",
    "outputId": "cf5e4f66-fb98-47ba-fd03-ad114c81fc90",
    "papermill": {
     "duration": 78.680241,
     "end_time": "2024-08-21T09:06:43.461779",
     "exception": false,
     "start_time": "2024-08-21T09:05:24.781538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Best Parameters: {'max_depth': None, 'n_estimators': 150}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Neural Network Best Parameters: {'hidden_layer_sizes': (200,), 'max_iter': 400}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Define parameter grids\n",
    "param_grid_rf = {'n_estimators': [50, 100, 150],\n",
    "                 'max_depth': [None, 10, 20]}\n",
    "\n",
    "param_grid_nn = {'hidden_layer_sizes': [(50,), (100,), (200,)],\n",
    "                 'max_iter': [200, 400, 600]}\n",
    "\n",
    "# Grid search for Random Forest\n",
    "grid_search_rf = GridSearchCV(rf_classifier, param_grid_rf, cv=5, scoring='accuracy')\n",
    "grid_search_rf.fit(X_train, y_train)\n",
    "print(\"Random Forest Best Parameters:\", grid_search_rf.best_params_)\n",
    "\n",
    "# Grid search for Neural Network\n",
    "grid_search_nn = GridSearchCV(nn_classifier, param_grid_nn, cv=5, scoring='accuracy')\n",
    "grid_search_nn.fit(X_train, y_train)\n",
    "print(\"Neural Network Best Parameters:\", grid_search_nn.best_params_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9fb75511",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:06:43.494483Z",
     "iopub.status.busy": "2024-08-21T09:06:43.493964Z",
     "iopub.status.idle": "2024-08-21T09:06:45.153700Z",
     "shell.execute_reply": "2024-08-21T09:06:45.152692Z"
    },
    "id": "lPYUAuOD-V5Y",
    "papermill": {
     "duration": 1.678945,
     "end_time": "2024-08-21T09:06:45.156371",
     "exception": false,
     "start_time": "2024-08-21T09:06:43.477426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "def plot_comparison(scores, labels, title):\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    sns.barplot(x=labels, y=scores, palette=\"viridis\")\n",
    "    plt.title(title)\n",
    "    plt.xlabel(\"Classifier\")\n",
    "    plt.ylabel(\"Score\")\n",
    "    plt.ylim(0, 1)\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d58ed45b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:06:45.173327Z",
     "iopub.status.busy": "2024-08-21T09:06:45.172892Z",
     "iopub.status.idle": "2024-08-21T09:06:45.450425Z",
     "shell.execute_reply": "2024-08-21T09:06:45.449589Z"
    },
    "id": "-fPq2it6-YdH",
    "outputId": "e0b0aa2e-a6e9-4de0-abdf-4f432042e18c",
    "papermill": {
     "duration": 0.288082,
     "end_time": "2024-08-21T09:06:45.452548",
     "exception": false,
     "start_time": "2024-08-21T09:06:45.164466",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1765: FutureWarning: unique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n",
      "  order = pd.unique(vector)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot cross-validation scores comparison\n",
    "plot_comparison(cv_scores, [\"Decision Tree\", \"Random Forest\", \"Na√Øve Bayes\", \"KNN\", \"Neural Network\"],\n",
    "                \"Cross-Validation Scores Comparison\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c9cf276c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:06:45.470348Z",
     "iopub.status.busy": "2024-08-21T09:06:45.470042Z",
     "iopub.status.idle": "2024-08-21T09:06:48.627817Z",
     "shell.execute_reply": "2024-08-21T09:06:48.626848Z"
    },
    "id": "KfwVMaRu-dOs",
    "outputId": "dd16f589-8cf5-4b2c-e5ae-601fb777bfe7",
    "papermill": {
     "duration": 3.168931,
     "end_time": "2024-08-21T09:06:48.629850",
     "exception": false,
     "start_time": "2024-08-21T09:06:45.460919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1765: FutureWarning: unique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n",
      "  order = pd.unique(vector)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "\n",
    "# Calculate F1-score for each classifier\n",
    "f1_scores = []\n",
    "for classifier in classifiers:\n",
    "    classifier.fit(X_train, y_train)\n",
    "    y_pred = classifier.predict(X_test)\n",
    "    f1_scores.append(f1_score(y_test, y_pred, average='weighted'))\n",
    "\n",
    "# Plot F1-score comparison\n",
    "plot_comparison(f1_scores, [\"Decision Tree\", \"Random Forest\", \"Na√Øve Bayes\", \"KNN\", \"Neural Network\"],\n",
    "                \"F1-Score Comparison\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00c2dcf1",
   "metadata": {
    "id": "-K3vj77k_uRn",
    "papermill": {
     "duration": 0.008679,
     "end_time": "2024-08-21T09:06:48.647955",
     "exception": false,
     "start_time": "2024-08-21T09:06:48.639276",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Conclusion and Insights**\n",
    "\n",
    "*   From the cross-validation scores comparison, we can observe the performance of different classifiers on average over various folds of the training data.\n",
    "*   Comparing evaluation metrics like F1-score provides insight into how well the classifiers perform on the test set.\n",
    "* Based on these comparisons, we can choose the best-performing classifier for our specific task. For example, if we prioritize accuracy, we might choose the Random Forest classifier, while for tasks where precision and recall are crucial, the Neural Network might be a better choice.\n",
    "* Parameter tuning using grid search and cross-validation can further enhance the performance of the selected classifier. We can visualize the impact of different parameters on the performance metrics to fine-tune our models.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "33d779fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:06:48.667789Z",
     "iopub.status.busy": "2024-08-21T09:06:48.667452Z",
     "iopub.status.idle": "2024-08-21T09:06:49.385486Z",
     "shell.execute_reply": "2024-08-21T09:06:49.384419Z"
    },
    "id": "JCjVUxffMg4k",
    "outputId": "c5a74427-dee6-46ad-e940-717afc8dbd09",
    "papermill": {
     "duration": 0.731013,
     "end_time": "2024-08-21T09:06:49.387625",
     "exception": false,
     "start_time": "2024-08-21T09:06:48.656612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters for Decision Tree: {'max_depth': 10}\n",
      "Best parameters for KNN: {'n_neighbors': 3}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "# Define the range of values for max_depth and n_neighbors\n",
    "param_grid_dt = {\n",
    "    'max_depth': [3, 5, 7, 10]\n",
    "}\n",
    "param_grid_knn = {\n",
    "    'n_neighbors': [3, 5, 7, 10]\n",
    "}\n",
    "# Decision Tree Classifier\n",
    "dt = DecisionTreeClassifier()\n",
    "\n",
    "# KNN Classifier\n",
    "knn = KNeighborsClassifier()\n",
    "\n",
    "# GridSearch for Decision Tree\n",
    "dt_grid_search = GridSearchCV(dt, param_grid_dt, cv=5)\n",
    "dt_grid_search.fit(X_train, y_train)\n",
    "\n",
    "# GridSearch for KNN\n",
    "knn_grid_search = GridSearchCV(knn, param_grid_knn, cv=5)\n",
    "knn_grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Best parameters for Decision Tree\n",
    "print(\"Best parameters for Decision Tree:\", dt_grid_search.best_params_)\n",
    "\n",
    "# Best parameters for KNN\n",
    "print(\"Best parameters for KNN:\", knn_grid_search.best_params_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a88261a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:06:49.409020Z",
     "iopub.status.busy": "2024-08-21T09:06:49.408236Z",
     "iopub.status.idle": "2024-08-21T09:06:49.414244Z",
     "shell.execute_reply": "2024-08-21T09:06:49.413363Z"
    },
    "id": "Ar_LvE75NekM",
    "outputId": "9e55238d-f4db-40db-f2bb-ff495646767c",
    "papermill": {
     "duration": 0.018169,
     "end_time": "2024-08-21T09:06:49.416084",
     "exception": false,
     "start_time": "2024-08-21T09:06:49.397915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\nRandom Forest Best Parameters:{'max_depth': 20, 'n_estimators': 150}\\nNeural Network Best Parameters:{'hidden_layer_sizes': (200,), 'max_iter': 600}\\nBest parameters for Decision Tree:{'max_depth': 10}\\nBest parameters for KNN:{'n_neighbors': 3}\\n\""
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Random Forest Best Parameters:{'max_depth': 20, 'n_estimators': 150}\n",
    "Neural Network Best Parameters:{'hidden_layer_sizes': (200,), 'max_iter': 600}\n",
    "Best parameters for Decision Tree:{'max_depth': 10}\n",
    "Best parameters for KNN:{'n_neighbors': 3}\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fe5690a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-21T09:06:49.435231Z",
     "iopub.status.busy": "2024-08-21T09:06:49.434748Z",
     "iopub.status.idle": "2024-08-21T09:06:52.787038Z",
     "shell.execute_reply": "2024-08-21T09:06:52.786100Z"
    },
    "id": "i9uBjhW3O476",
    "outputId": "2f731009-6004-4531-9d1b-c2cade2453e5",
    "papermill": {
     "duration": 3.364233,
     "end_time": "2024-08-21T09:06:52.789165",
     "exception": false,
     "start_time": "2024-08-21T09:06:49.424932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "\n",
    "# Define best hyperparameters\n",
    "best_dt_max_depth = 10\n",
    "best_knn_k = 3\n",
    "best_rf_max_depth = 20\n",
    "best_rf_n_estimators = 150\n",
    "best_nn_hidden_layer_size = (200,)\n",
    "best_nn_max_iter = 600\n",
    "\n",
    "# Initialize classifiers with best hyperparameters\n",
    "dt_classifier = DecisionTreeClassifier(max_depth=best_dt_max_depth)\n",
    "knn_classifier = KNeighborsClassifier(n_neighbors=best_knn_k)\n",
    "rf_classifier = RandomForestClassifier(max_depth=best_rf_max_depth, n_estimators=best_rf_n_estimators)\n",
    "nn_classifier = MLPClassifier(hidden_layer_sizes=best_nn_hidden_layer_size, max_iter=best_nn_max_iter)\n",
    "\n",
    "# Train classifiers on training data\n",
    "dt_classifier.fit(X_train, y_train)\n",
    "knn_classifier.fit(X_train, y_train)\n",
    "rf_classifier.fit(X_train, y_train)\n",
    "nn_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Predict on training data\n",
    "dt_train_pred = dt_classifier.predict(X_train)\n",
    "knn_train_pred = knn_classifier.predict(X_train)\n",
    "rf_train_pred = rf_classifier.predict(X_train)\n",
    "nn_train_pred = nn_classifier.predict(X_train)\n",
    "\n",
    "# Predict on test data\n",
    "dt_test_pred = dt_classifier.predict(X_test)\n",
    "knn_test_pred = knn_classifier.predict(X_test)\n",
    "rf_test_pred = rf_classifier.predict(X_test)\n",
    "nn_test_pred = nn_classifier.predict(X_test)\n",
    "\n",
    "# Calculate accuracies\n",
    "dt_train_accuracy = accuracy_score(y_train, dt_train_pred)\n",
    "knn_train_accuracy = accuracy_score(y_train, knn_train_pred)\n",
    "rf_train_accuracy = accuracy_score(y_train, rf_train_pred)\n",
    "nn_train_accuracy = accuracy_score(y_train, nn_train_pred)\n",
    "\n",
    "dt_test_accuracy = accuracy_score(y_test, dt_test_pred)\n",
    "knn_test_accuracy = accuracy_score(y_test, knn_test_pred)\n",
    "rf_test_accuracy = accuracy_score(y_test, rf_test_pred)\n",
    "nn_test_accuracy = accuracy_score(y_test, nn_test_pred)\n",
    "\n",
    "# Plot comparison\n",
    "models = ['Decision Tree', 'KNN', 'Random Forest', 'Neural Network']\n",
    "train_accuracies = [dt_train_accuracy, knn_train_accuracy, rf_train_accuracy, nn_train_accuracy]\n",
    "test_accuracies = [dt_test_accuracy, knn_test_accuracy, rf_test_accuracy, nn_test_accuracy]\n",
    "\n",
    "# Plot training accuracies with percentages\n",
    "plt.figure(figsize=(10, 5))\n",
    "bars = plt.bar(models, train_accuracies, color='blue', alpha=0.5)\n",
    "\n",
    "\n",
    "for bar, accuracy in zip(bars, train_accuracies):\n",
    "    plt.text(bar.get_x() + bar.get_width() / 2 - 0.1, bar.get_height() + 0.01, f'{accuracy*100:.2f}%', ha='center', color='black')\n",
    "\n",
    "plt.title('Training Accuracies of Different Models')\n",
    "plt.xlabel('Models')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xticks(rotation=45)\n",
    "plt.ylim(0, 1)  # Set y-axis limit to ensure consistent scaling\n",
    "plt.show()\n",
    "\n",
    "# Plot testing accuracies with percentages\n",
    "plt.figure(figsize=(10, 5))\n",
    "bars = plt.bar(models, test_accuracies, color='green', alpha=0.5)\n",
    "\n",
    "\n",
    "for bar, accuracy in zip(bars, test_accuracies):\n",
    "    plt.text(bar.get_x() + bar.get_width() / 2 - 0.1, bar.get_height() + 0.01, f'{accuracy*100:.2f}%', ha='center', color='black')\n",
    "\n",
    "plt.title('Testing Accuracies of Different Models')\n",
    "plt.xlabel('Models')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xticks(rotation=45)\n",
    "plt.ylim(0, 1)  # Set y-axis limit to ensure consistent scaling\n",
    "plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 109.086696,
   "end_time": "2024-08-21T09:06:53.318776",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-21T09:05:04.232080",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
